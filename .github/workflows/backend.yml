name: Backend CI

on:
  push:
    branches: ["main"]
    paths:
      - "packages/backend/**"
  pull_request:
    branches: ["main"]
    paths:
      - "packages/backend/**"

jobs:
  build:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: packages/backend

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: "0"

      - name: Setup Node v22
        uses: actions/setup-node@v4
        with:
          node-version: "22.x"

      - name: Enable Corepack
        run: corepack enable

      - name: Set Yarn version to @stable
        run: corepack prepare yarn@stable --activate

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn config get cacheFolder)"

      # NOTE, this probably isnt tuned fully right
      - uses: actions/cache@v4
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: yarn install

      # - name: Run ESLint
      #   run: yarn run eslint . --max-warnings 9999

      - name: Build TypeScript app
        run: yarn build

      - name: Run Vitest tests
        run: yarn vitest

      - name: Get release version
        id: version
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          RELEASE_VERSION=$(echo $PACKAGE_VERSION | awk -F. '{$NF = $NF + 1;} 1' | sed 's/ /./g')
          echo "RELEASE_VERSION=$RELEASE_VERSION" >> $GITHUB_OUTPUT

      - name: Set up Docker
        uses: docker-practice/actions-setup-docker@master

      - name: Build Docker image
        run: |
          docker build -t estate-metrics . --file Dockerfile --tag estate-metrics:${{ steps.version.outputs.RELEASE_VERSION }}

      # TODO move this to its own job
      # - name: Deploy to on-prem server
      #   uses: appleboy/ssh-action@master
      #   with:
      #     host: ${{ secrets.HOST }}
      #     username: ${{ secrets.USERNAME }}
      #     key: ${{ secrets.SSH_PRIVATE_KEY }}
      #     script: |
      #       docker stop my-container || true
      #       docker rm my-container || true
      #       docker pull my-image-name:${{ steps.version.outputs.RELEASE_VERSION }}
      #       docker run -d --name my-container my-image-name:${{ steps.version.outputs.RELEASE_VERSION }}
