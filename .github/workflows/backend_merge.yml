name: Build, Publish and Deploy Docker Image

on:
  pull_request:
    types: [closed]
    branches: [main]
    paths:
      - "packages/backend/**"

jobs:
  update-version:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: packages/backend

    outputs:
      new_version: ${{ steps.bump-version.outputs.new_version }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22.x"

      - name: Bump version
        id: bump-version
        run: |
          current_version=$(jq -r '.version' package.json)
          IFS='.' read -r -a version_parts <<< "$current_version"
          version_parts[2]=$((version_parts[2] + 1))
          new_version="${version_parts[0]}.${version_parts[1]}.${version_parts[2]}"
          jq ".version = \"$new_version\"" package.json > tmp.$$.json && mv tmp.$$.json package.json
          echo "::set-output name=new_version::$new_version"

      - name: Commit version bump
        env:
          NEW_VERSION: ${{ steps.bump-version.outputs.new_version }}
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add package.json
          git commit -m "Bump version to ${{ env.new_version }}"
          git push origin main

      - name: Create and push tag
        env:
          NEW_VERSION: ${{ steps.bump-version.outputs.new_version }}
        run: |
          git tag -a "v${{ env.new_version }}" -m "Release version ${{ env.new_version }}"
          git push origin "v${{ env.new_version }}"

      - name: Create GitHub release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NEW_VERSION: ${{ steps.bump-version.outputs.new_version }}
        with:
          tag_name: "v${{ env.new_version }}"
          release_name: "Release v${{ env.new_version }}"
          body: "Release of version ${{ env.new_version }}"
          draft: false
          prerelease: false

  build:
    runs-on: ubuntu-latest

    needs: update-version

    defaults:
      run:
        working-directory: packages/backend

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker
        uses: docker-practice/actions-setup-docker@master

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Docker image
        run: |
          docker buildx build \
            --platform linux/arm64 \
            -t ghcr.io/${{ github.repository }}/estate-metrics:${{ needs.update-version.outputs.new_version }} \
            -t ghcr.io/${{ github.repository }}/estate-metrics:latest \
            --push .

  deploy:
    runs-on: ubuntu-latest

    needs: build

    defaults:
      run:
        working-directory: packages/backend

    steps:
      - uses: actions/checkout@v4

      - name: Pull New Image and Restart
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          password: ${{ secrets.SSH_PASSPHRASE }}
          port: 8362
          script: |
            source ~/.zshrc
            echo ${{ secrets.ACCESS_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            docker pull ghcr.io/${{ github.repository }}/estate-metrics:latest

            # Navigate to the specified directory
            cd ~/Docker

            # Check if the repository has already been cloned
            if [ ! -d "estatemetrics" ]; then
              # Clone the private repository
              git clone https://github.com/rileyhilliard/estatemetrics.git
              cd estatemetrics
            else
              # Navigate into the repository directory
              cd estatemetrics
              
              # Pull the latest changes from the repository
              git pull
            fi

            # Navigate to the docker-compose directory
            cd packages/dockers/EstateMetrics

            # Run docker-compose
            docker-compose up -d
