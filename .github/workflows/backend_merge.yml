name: Build, Publish and Deploy Docker Image

on:
  pull_request:
    types: [closed]
    branches: [main]
    paths:
      - "packages/backend/**"

jobs:
  build-smoke-test:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: packages/backend

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: "0"

      - name: Setup Node v22
        uses: actions/setup-node@v4
        with:
          node-version: "22.x"

      - name: Enable Corepack
        run: corepack enable

      - name: Set Yarn version to @stable
        run: corepack prepare yarn@stable --activate

      # Enable Corepack for Yarn 4
      - name: Enable Corepack
        run: corepack enable

      # Set Yarn version to the latest stable version
      - name: Set Yarn version to @stable
        run: corepack prepare yarn@stable --activate

      # Get the Yarn cache directory path
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT

      # Cache the Yarn cache directory
      - uses: actions/cache@v4
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: yarn install

      - name: Build TypeScript app
        run: yarn build

      - name: Run Vitest tests
        run: yarn vitest
  update-version:
    runs-on: ubuntu-latest

    needs: build-smoke-test

    defaults:
      run:
        working-directory: packages/backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node v22
        uses: actions/setup-node@v4
        with:
          node-version: "22.x"

      # Enable Corepack for Yarn 4
      - name: Enable Corepack
        run: corepack enable

      # Set Yarn version to the latest stable version
      - name: Set Yarn version to @stable
        run: corepack prepare yarn@stable --activate

      # Get the Yarn cache directory path
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT

      # Restore the Yarn cache
      - uses: actions/cache@v4
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      # Install dependencies (this will use the cached packages if available)
      - name: Install dependencies
        run: yarn install

      - name: Bump release version
        working-directory: packages/backend
        id: bump-version
        run: |
          yarn version patch

      - name: Update package.json
        working-directory: packages/backend
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git add package.json
          git push origin main --tags

  build:
    runs-on: ubuntu-latest

    needs: update-version

    defaults:
      run:
        working-directory: packages/backend

    steps:
      - uses: actions/checkout@v4

      - name: Read package.json
        id: package-version
        uses: martinbeentjes/npm-get-version-action@v1.3.1
        with:
          path: packages/backend

      - name: Log read version
        run: echo ${{ steps.package-version.outputs.current-version }}

      - name: Set up Docker
        uses: docker-practice/actions-setup-docker@master

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Docker image
        run: |
          docker buildx build --platform linux/arm64 -t ghcr.io/${{ github.repository }}/estate-metrics:${{ steps.package-version.outputs.current-version }} --push .

  deploy:
    runs-on: ubuntu-latest

    needs: build

    defaults:
      run:
        working-directory: packages/backend

    steps:
      - uses: actions/checkout@v4

      - name: Read package.json
        id: package-version
        uses: martinbeentjes/npm-get-version-action@v1.3.1
        with:
          path: packages/backend

      - name: Pull New Image and Restart
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          password: ${{ secrets.SSH_PASSPHRASE }}
          port: 8362
          script: |
            source ~/.zshrc
            echo ${{ secrets.ACCESS_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            docker pull ghcr.io/${{ github.repository }}/estate-metrics:${{ steps.package-version.outputs.current-version }}

            # Check if elasticsearch_estatemetrics container is running
            if [ "$(docker inspect -f '{{.State.Running}}' elasticsearch_estatemetrics 2>/dev/null)" = "true" ]; then
              echo "elasticsearch_estatemetrics is already running"
            else
              # Check if elasticsearch_estatemetrics container exists
              if docker ps -a --format '{{.Names}}' | grep -Eq "^elasticsearch_estatemetrics$"; then
                echo "elasticsearch_estatemetrics container exists, restarting..."
                docker restart elasticsearch_estatemetrics
              else
                echo "elasticsearch_estatemetrics container does not exist, creating..."
                docker run -d --name elasticsearch_estatemetrics -p 9200:9200 -p 9300:9300 -e "discovery.type=single-node" -v elasticsearch-data-estatemetrics:/usr/share/elasticsearch/data docker.elastic.co/elasticsearch/elasticsearch:7.17.0
              fi
            fi

            # Check if kibana_estatemetrics container is running
            if [ "$(docker inspect -f '{{.State.Running}}' kibana_estatemetrics 2>/dev/null)" = "true" ]; then
              echo "kibana_estatemetrics is already running"
            else
              # Check if kibana_estatemetrics container exists
              if docker ps -a --format '{{.Names}}' | grep -Eq "^kibana_estatemetrics$"; then
                echo "kibana_estatemetrics container exists, restarting..."
                docker restart kibana_estatemetrics
              else
                echo "kibana_estatemetrics container does not exist, creating..."
                docker run -d --name kibana_estatemetrics -p 5601:5601 \
                  -e "ELASTICSEARCH_HOSTS=http://elasticsearch:9200" \
                  -e "SERVER_PUBLICBASEURL=http://kibana.opnhub.ai" \
                  -e "SERVER_HOST=0.0.0.0" \
                  --link elasticsearch_estatemetrics:elasticsearch \
                  docker.elastic.co/kibana/kibana:7.17.20
              fi
            fi

            docker stop estatemetrics ; docker rm estatemetrics || true
            docker run -d --name estatemetrics -p 4000:4000 -e "NODE_ENV=production" --link elasticsearch_estatemetrics:elasticsearch ghcr.io/${{ github.repository }}/estate-metrics:${{ steps.package-version.outputs.current-version }}
